- name: host__public_address is set
  set_fact:
    host__public_address: '{{ ansible_facts.default_ipv4.address }}'
  when: host__public_address is undefined

- name: /etc/hosts has entries needed
  lineinfile:
    path: /etc/hosts
    line: '{{ item }}'
    state: present
  loop: '{{ base__hosts_entries }}'

- name: YUM repositories needed are enabled
  yum_repository:
    name: '{{ item.name }}'
    description: '{{ item.description }}'
    baseurl: '{{ item.baseurl }}'
    gpgkey: '{{ item.gpgkey }}'
    gpgcheck: '{{ item.gpgcheck }}'
    enabled: true
  loop: '{{ base__yum_repos_to_enable }}'

- name: YUM repositories unneeded are disabled
  ini_file:
    path: '{{ item.path }}'
    section: '{{ item.name }}'
    option: enabled
    value: 0
  loop: '{{ base__yum_repos_to_disable }}'

- name: ntp is setup
  block:
  - name: chrony is installed
    yum:
      name: chrony
      state: latest
  - name: chrony is configured
    template:
      src: chrony/chrony.conf.j2
      dest: /etc/chrony.conf
  - name: chronyd is running and enabled
    service:
      name: chronyd
      state: started
      enabled: true

- name: swap off
  block:
  - name: swap doesn't exist in fstab
    mount:
      path: swap
      fstype: swap
      state: absent
  - name: check swap devices
    command: swapon -s
    register: swap_devices
    changed_when: false
  - name: swapoff -a
    command: swapoff -a
    when: swap_devices.stdout != ""
  when: host__k8s_node

- name: SELinux is set to permissive
  selinux:
    policy: targeted
    state: permissive

- name: br_netfilter
  block:
  - name: br_netfilter module is loaded
    modprobe:
      name: br_netfilter
      state: present
  - name: br_netfilter module is loaded on boot
    copy:
      content: br_netfilter
      dest: /etc/modules-load.d/br_netfilter.conf
  when: host__k8s_node

- name: Kernel parametes are tuned
  sysctl:
    name: '{{ item.name }}'
    value: '{{ item.value }}'
    sysctl_set: true
    state: present
    reload: true
  loop: '{{ base__kernel_params }}'
  when: host__k8s_node

- name: firewalld is disabled
  systemd:
    name: firewalld
    state: stopped
    enabled: false

- name: The server is rebooted
  block:
  - name: Reboot is started
    shell: sleep 2 && shutdown -r now
    async: 1
    poll: 0
    sudo: true
    ignore_errors: true
  - name: The server is up again
    wait_for:
      port: '{{ ansible_port | default(ansible_ssh_port) | default(22) }}'
      host: '{{ ansible_host }}'
      state: started
      delay: '{{ base__reboot_polling_delay }}'
      timeout: '{{ base__reboot_polling_timeout }}'
    delegate_to: 127.0.0.1
