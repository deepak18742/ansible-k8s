- name: host__public_address is set
  set_fact:
    host__public_address: '{{ ansible_facts.default_ipv4.address }}'
  when: host__public_address is undefined

- name: Check if dnf command is available
  command: which dnf
  register: _check_dnf
  ignore_errors: true
- name: host__use_dnf is set
  set_fact:
    host__use_dnf: '{{ _check_dnf is not failed }}'
  when: host__use_dnf is undefined

- name: /etc/hosts has entries needed
  lineinfile:
    path: /etc/hosts
    line: '{{ item }}'
    state: present
  loop: '{{ base__hosts_entries }}'

- name: YUM repositories needed are enabled
  yum_repository:
    name: '{{ item.name }}'
    description: '{{ item.description }}'
    baseurl: '{{ item.baseurl }}'
    gpgkey: '{{ item.gpgkey }}'
    gpgcheck: '{{ item.gpgcheck }}'
    enabled: true
  loop: '{{ base__yum_repos_to_enable }}'

- name: YUM repositories unneeded are disabled
  ini_file:
    path: '{{ item.path }}'
    section: '{{ item.name }}'
    option: enabled
    value: 0
  loop: '{{ base__yum_repos_to_disable }}'

- name: ntp is setup
  block:
  - name: chrony is installed
    yum:
      name: chrony
      state: latest
    when: not host__use_dnf
  - name: chrony is installed
    dnf:
      name: chrony
      state: latest
    when: host__use_dnf
  - name: chrony is configured
    template:
      src: chrony/chrony.conf.j2
      dest: /etc/chrony.conf
  - name: chronyd is running and enabled
    service:
      name: chronyd
      state: started
      enabled: true
  when: base__ntp_servers

- name: SELinux is configured
  selinux:
    policy: '{{ base__selinux.policy }}'
    state: '{{ base__selinux.state }}'
  when: base__selinux

- name: firewalld is disabled
  systemd:
    name: firewalld
    state: stopped
    enabled: false
  when: base__disable_firewalld

- name: Remote tmp dir exists
  file:
    path: '{{ k8s__remote_tmp_dir }}'
    state: directory

- name: The server is rebooted
  block:
  - name: Reboot is started
    shell: sleep 2 && shutdown -r now
    async: 1
    poll: 0
    ignore_errors: true
  - name: The server is up again
    wait_for:
      port: '{{ ansible_port | default(ansible_ssh_port) | default(22) }}'
      host: '{{ ansible_host }}'
      state: started
      delay: '{{ base__reboot_polling_delay }}'
      timeout: '{{ base__reboot_polling_timeout }}'
    delegate_to: 127.0.0.1
  when: not base__skip_reboot
