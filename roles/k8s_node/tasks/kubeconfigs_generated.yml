- name: host__kube_apiserver_ip is set
  block:
  - name: host__kube_apiserver_ip is set to host__public_address if the host is k8s master
    set_fact:
      host__kube_apiserver_ip: '{{ host__public_address }}'
    when: host__is_k8s_master
  - name: host__kube_apiserver_ip is set to a k8s master's IP
    set_fact:
      host__kube_apiserver_ip: '{{ hostvars.values() | selectattr("host__is_k8s_master") | map(attribute="host__public_address") | first }}'
    when: not host__is_k8s_master
  when: host__kube_apiserver_ip is undefined

- name: admin kubeconfig
  vars:
    _k8s_user: kubernetes-admin
    _kubeconfig: '{{ k8s_node__kubeconfig_dir }}/admin.kubeconfig'
  block:
  - name: Cluster is set in admin kubeconfig
    command: '{{ k8s__k8s_bin_dir }}/kubectl config set-cluster {{ k8s__k8s_cluster_name }} --certificate-authority={{ k8s_node__pki_dir }}/ca.crt --embed-certs=true --server=https://{{ host__kube_apiserver_ip }}:{{ k8s__kube_apiserver_secure_port }} --kubeconfig={{ _kubeconfig }}'
  - name: Client certificate is set in admin kubeconfig
    command: '{{ k8s__k8s_bin_dir }}/kubectl config set-credentials {{ _k8s_user }} --client-certificate={{ k8s_node__pki_dir }}/admin.crt --client-key={{ k8s_node__pki_dir }}/admin.key --embed-certs=true --kubeconfig={{ _kubeconfig }}'
  - name: Context is set in admin kubeconfig
    command: '{{ k8s__k8s_bin_dir }}/kubectl config set-context {{ _k8s_user }}@{{ k8s__k8s_cluster_name }} --cluster={{ k8s__k8s_cluster_name }} --user={{ _k8s_user }} --kubeconfig={{ _kubeconfig }}'
  - name: Context is enabled in admin kubeconfig
    command: '{{ k8s__k8s_bin_dir }}/kubectl config use-context {{ _k8s_user }}@{{ k8s__k8s_cluster_name }} --kubeconfig={{ _kubeconfig }}'
  - name: Only root can read admin kubeconfig
    file:
      path: '{{ _kubeconfig }}'
      owner: root
      group: root
      mode: 0600
  - name: /root/.kube/ exists
    file:
      path: /root/.kube/
      owner: root
      group: root
      mode: 0700
      state: directory
  - name: admin kubeconfig is installed for root
    file:
      path: /root/.kube/config
      src: '{{ _kubeconfig }}'
      owner: root
      group: root
      mode: 0600
      state: link

- name: kube-proxy kubeconfig
  vars:
    _k8s_user: system:kube-proxy
    _kubeconfig: '{{ k8s_node__kubeconfig_dir }}/kube-proxy.kubeconfig'
  block:
  - name: Cluster is set in kube-proxy kubeconfig
    command: '{{ k8s__k8s_bin_dir }}/kubectl config set-cluster {{ k8s__k8s_cluster_name }} --certificate-authority={{ k8s_node__pki_dir }}/ca.crt --embed-certs=true --server=https://{{ host__kube_apiserver_ip }}:{{ k8s__kube_apiserver_secure_port }} --kubeconfig={{ _kubeconfig }}'
  - name: Client certificate is set in kube-proxy kubeconfig
    command: '{{ k8s__k8s_bin_dir }}/kubectl config set-credentials {{ _k8s_user }} --client-certificate={{ k8s_node__pki_dir }}/kube-proxy.crt --client-key={{ k8s_node__pki_dir }}/kube-proxy.key --embed-certs=true --kubeconfig={{ _kubeconfig }}'
  - name: Context is set in kube-proxy kubeconfig
    command: '{{ k8s__k8s_bin_dir }}/kubectl config set-context {{ _k8s_user }}@{{ k8s__k8s_cluster_name }} --cluster={{ k8s__k8s_cluster_name }} --user={{ _k8s_user }} --kubeconfig={{ _kubeconfig }}'
  - name: Context is enabled in kube-proxy kubeconfig
    command: '{{ k8s__k8s_bin_dir }}/kubectl config use-context {{ _k8s_user }}@{{ k8s__k8s_cluster_name }} --kubeconfig={{ _kubeconfig }}'
  - name: Only root can read kube-proxy kubeconfig
    file:
      path: '{{ _kubeconfig }}'
      owner: root
      group: root
      mode: 0600

- name: Bootstrap kubeconfig
  vars:
    _k8s_user: kubelet-bootstrap
    _kubeconfig: '{{ k8s_node__kubeconfig_dir }}/bootstrap.kubeconfig'
  block:
  - name: Cluster is set in bootstrap kubeconfig
    command: '{{ k8s__k8s_bin_dir }}/kubectl config set-cluster {{ k8s__k8s_cluster_name }} --certificate-authority={{ k8s_node__pki_dir }}/ca.crt --embed-certs=true --server=https://{{ host__kube_apiserver_ip }}:{{ k8s__kube_apiserver_secure_port }} --kubeconfig={{ _kubeconfig }}'
  - name: Context is set in bootstrap kubeconfig
    command: '{{ k8s__k8s_bin_dir }}/kubectl config set-context {{ _k8s_user }}@{{ k8s__k8s_cluster_name }} --cluster={{ k8s__k8s_cluster_name }} --user={{ _k8s_user }} --kubeconfig={{ _kubeconfig }}'
  - name: Context is enabled in bootstrap kubeconfig
    command: '{{ k8s__k8s_bin_dir }}/kubectl config use-context {{ _k8s_user }}@{{ k8s__k8s_cluster_name }} --kubeconfig={{ _kubeconfig }}'
  - name: Bootstrap token is generated
    command: '{{ k8s__k8s_bin_dir }}/kubeadm token create --kubeconfig {{ k8s_node__kubeconfig_dir }}/admin.kubeconfig'
    register: _bootstrap_token
  - name: Bootstrap token is set in bootstrap kubeconfig
    command: '{{ k8s__k8s_bin_dir }}/kubectl config set-credentials kubelet-bootstrap --token={{ _bootstrap_token.stdout }} --kubeconfig={{ _kubeconfig }}'
  - name: Only root can read bootstrap kubeconfig
    file:
      path: '{{ _kubeconfig }}'
      owner: root
      group: root
      mode: 0600
