- name: pki dir exists
  file:
    path: '{{ pki__pki_dir }}'
    owner: root
    group: root
    mode: 0755
    state: directory

- name: openssl config
  block:
  - name: Check if openssl config exists
    stat:
      path: '{{ pki__pki_dir }}/openssl.pki.conf'
    register: _stat_result
  - name: openssl config exists
    template:
      src: pki/openssl.conf.j2
      dest: '{{ pki__pki_dir }}/openssl.pki.conf'
      owner: root
      group: root
      mode: 0644
    when: not _stat_result.stat.exists

- name: CA cert for k8s cluster
  block:
  - name: Check if ca.key exists
    stat:
      path: '{{ pki__pki_dir }}/ca.key'
    register: _stat_result
  - name: Private key for k8s CA exists
    command: /usr/bin/openssl ecparam -name {{ pki__elliptic_curve_type }} -genkey -noout -out {{ pki__pki_dir }}/ca.key
    when: not _stat_result.stat.exists
  - name: k8s CA key is fetched
    fetch:
      src: '{{ pki__pki_dir }}/ca.key'
      dest: '{{ k8s__local_shared_dir }}/'
      flat: true
  - name: Check if ca.crt exists
    stat:
      path: '{{ pki__pki_dir }}/ca.crt'
    register: _stat_result
  - name: CA cert for k8s cluster exists
    command: /usr/bin/openssl req -x509 -new -sha256 -nodes -key {{ pki__pki_dir }}/ca.key -days {{ pki__k8s_ca_cert_valid_days }} -out {{ pki__pki_dir }}/ca.crt -subj "/CN=kubernetes-ca" -extensions v3_ca -config {{ pki__pki_dir }}/openssl.pki.conf
    when: not _stat_result.stat.exists
  - name: k8s CA certificate is fetched
    fetch:
      src: '{{ pki__pki_dir }}/ca.crt'
      dest: '{{ k8s__local_shared_dir }}/'
      flat: true

- name: ServiceAccount token key
  block:
  - name: Check if sa.key exists
    stat:
      path: '{{ pki__pki_dir }}/sa.key'
    register: _stat_result
  - name: Private key for ServiceAccount token exists
    command: /usr/bin/openssl ecparam -name {{ pki__elliptic_curve_type }} -genkey -noout -out {{ pki__pki_dir }}/sa.key
    when: not _stat_result.stat.exists
  - name: Private key for ServiceAccount is fetched
    fetch:
      src: '{{ pki__pki_dir }}/sa.key'
      dest: '{{ k8s__local_shared_dir }}/'
      flat: true
  - name: Check if sa.pub exists
    stat:
      path: '{{ pki__pki_dir }}/sa.pub'
    register: _stat_result
  - name: Public key for ServiceAccount token exists
    command: /usr/bin/openssl ec -in {{ pki__pki_dir }}/sa.key -outform PEM -pubout -out {{ pki__pki_dir }}/sa.pub
    when: not _stat_result.stat.exists
  - name: Public key for ServiceAccount is fetched
    fetch:
      src: '{{ pki__pki_dir }}/sa.pub'
      dest: '{{ k8s__local_shared_dir }}/'
      flat: true
