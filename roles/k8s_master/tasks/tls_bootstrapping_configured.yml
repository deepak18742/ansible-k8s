- name: k8s components are ready
  command: >-
    {{ k8s__k8s_bin_dir }}/kubectl get componentstatuses -o jsonpath='{.items[*].conditions[?(@.type=="Healthy")].status}'
  register: _componentstatuses
  until: _componentstatuses.stdout.find('False') == -1
  retries: 5
  delay: 5
  changed_when: false

- name: ClusterRoleBinding 'create-csrs-for-bootstrapping' exists
  command: '{{ k8s__k8s_bin_dir }}/kubectl apply -f -'
  args:
    stdin: |
      apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRoleBinding
      metadata:
        name: create-csrs-for-bootstrapping
      roleRef:
        apiGroup: rbac.authorization.k8s.io
        kind: ClusterRole
        name: system:node-bootstrapper
      subjects:
      - apiGroup: rbac.authorization.k8s.io
        kind: Group
        name: system:bootstrappers
  register: _apply_result
  changed_when: '" created" in _apply_result.stdout or " configured" in _apply_result.stdout'

- name: Auto approval for TLS bootstrapping CSRs
  block:
  - name: ClusterRoleBinding 'auto-approve-csrs-for-group' exists
    command: '{{ k8s__k8s_bin_dir }}/kubectl apply -f -'
    args:
      stdin: |
        kind: ClusterRoleBinding
        apiVersion: rbac.authorization.k8s.io/v1
        metadata:
          name: auto-approve-csrs-for-group
        subjects:
        - kind: Group
          name: system:bootstrappers
          apiGroup: rbac.authorization.k8s.io
        roleRef:
          kind: ClusterRole
          name: system:certificates.k8s.io:certificatesigningrequests:nodeclient
          apiGroup: rbac.authorization.k8s.io
    register: _apply_result
    changed_when: '" created" in _apply_result.stdout or " configured" in _apply_result.stdout'
  - name: ClusterRoleBinding 'auto-approve-renewals-for-nodes' exists
    command: '{{ k8s__k8s_bin_dir }}/kubectl apply -f -'
    args:
      stdin: |
        kind: ClusterRoleBinding
        apiVersion: rbac.authorization.k8s.io/v1
        metadata:
          name: auto-approve-renewals-for-nodes
        subjects:
        - kind: Group
          name: system:nodes
          apiGroup: rbac.authorization.k8s.io
        roleRef:
          kind: ClusterRole
          name: system:certificates.k8s.io:certificatesigningrequests:selfnodeclient
          apiGroup: rbac.authorization.k8s.io
    register: _apply_result
    changed_when: '" created" in _apply_result.stdout or " configured" in _apply_result.stdout'

- name: Bootstrap token
  block:
  - name: Bootstrap token is generated
    command: '{{ k8s__k8s_bin_dir }}/kubeadm token create --kubeconfig {{ k8s_master__kubeconfig_dir }}/admin.kubeconfig'
    register: _bootstrap_token
  - name: Bootstrap token is in the local shared dir
    shell: echo {{ _bootstrap_token.stdout }} > {{ k8s__local_shared_dir }}/bootstrap_token
    delegate_to: 127.0.0.1
